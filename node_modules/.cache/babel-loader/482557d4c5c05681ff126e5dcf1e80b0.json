{"ast":null,"code":"var _jsxFileName = \"/home/addweb/jsPractice/taskby-kelvin/react-crud-routing/src/components/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Header from './Header';\nimport { useState, useEffect } from 'react';\nimport Axios from 'axios'; // import { useForm } from 'react-hook-form'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Posts() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [editId, setEditId] = useState('');\n  const [items, setItems] = useState([]);\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState(''); // const [titleErr, setTitleErr] = useState({})\n  // const [bodyErr, setBodyErr] = useState({})\n\n  const [err, setErr] = useState({\n    titleErr: '',\n    bodyErr: ''\n  });\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    fetch(\"http://localhost:3001/posts\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const isValid = formValidation();\n\n    if (isValid) {\n      if (isEdit) {\n        Axios.put(`http://localhost:3001/posts/${editId}`, {\n          title: title,\n          body: body\n        }).then(res => {\n          setIsEdit(false);\n          setEditId('');\n          setTitle('');\n          setBody('');\n          getData();\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        Axios.post(\"http://localhost:3001/posts\", {\n          title: title,\n          body: body\n        }).then(res => {\n          getData();\n          setTitle('');\n          setBody('');\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n  };\n\n  const formValidation = () => {\n    const titleErr = {};\n    const bodyErr = {};\n    let isValid = true;\n\n    if (title.trim().length == 0) {\n      setE;\n      titleErr.emptyTitle = \"empty title\";\n      isValid = false;\n    }\n\n    if (body.trim().length == 0) {\n      bodyErr.emptyBody = \"empty description\";\n      isValid = false;\n    }\n\n    setTitleErr(titleErr);\n    setBodyErr(bodyErr);\n    return isValid;\n  }; //delete\n\n\n  const deleteHandler = item => {\n    console.log(item, \"item\");\n    Axios.delete(`http://localhost:3001/posts/${item}`).then(res => {\n      getData();\n    }).catch(err => {\n      console.log(err);\n    });\n  }; //edit//update\n\n\n  const editHandler = item => {\n    setTitle(item.title);\n    setBody(item.body);\n    setEditId(item.id);\n    setIsEdit(true);\n  }; //error and loading state\n\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"title\",\n            children: \"Enter Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 64\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setTitle(e.target.value),\n            value: title,\n            id: \"title\",\n            name: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 127\n          }, this), Object.keys(titleErr).map(key => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"red\"\n              },\n              children: titleErr[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 36\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"body\",\n            children: \"Enter Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 69\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setBody(e.target.value),\n            value: body,\n            id: \"body\",\n            name: \"body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 123\n          }, this), Object.keys(bodyErr).map(key => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"red\"\n              },\n              children: bodyErr[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 36\n            }, this);\n          }), isEdit ? /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"ID :- \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"TITLE :- \", item.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"DESCRIPTION :- \", item.body]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  deleteHandler(item.id);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"material-icons\",\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 89\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  editHandler(item);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"material-icons\",\n                  children: \"EDIT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 83\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(Posts, \"yEtVkCuDfG72/lbTtXq85Mng9Ng=\");\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/addweb/jsPractice/taskby-kelvin/react-crud-routing/src/components/Posts.js"],"names":["React","Header","useState","useEffect","Axios","Posts","error","setError","isLoaded","setIsLoaded","isEdit","setIsEdit","editId","setEditId","items","setItems","title","setTitle","body","setBody","err","setErr","titleErr","bodyErr","getData","fetch","then","res","json","result","submitHandler","e","preventDefault","isValid","formValidation","put","catch","console","log","post","trim","length","setE","emptyTitle","emptyBody","setTitleErr","setBodyErr","deleteHandler","item","delete","editHandler","id","message","textAlign","target","value","Object","keys","map","key","color","index"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Header from './Header'\nimport { useState, useEffect } from 'react'\nimport Axios from 'axios'\n// import { useForm } from 'react-hook-form'\n\nfunction Posts() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isEdit, setIsEdit] = useState(false);\n    const [editId, setEditId] = useState('')\n    const [items, setItems] = useState([]);\n    const [title, setTitle] = useState('')\n    const [body, setBody] = useState('')\n    // const [titleErr, setTitleErr] = useState({})\n    // const [bodyErr, setBodyErr] = useState({})\n    const [err, setErr] = useState({\n        titleErr:'',\n        bodyErr:''\n    })\n\n    useEffect(() => {\n        getData();\n\n    }, [])\n    const getData = () => {\n        fetch(\"http://localhost:3001/posts\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setItems(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const isValid = formValidation();\n        if (isValid) {\n            if (isEdit) {\n                Axios.put(`http://localhost:3001/posts/${editId}`, {\n                    title: title,\n                    body: body\n                })\n                    .then((res) => {\n                        setIsEdit(false)\n                        setEditId('')\n                        setTitle('');\n                        setBody('');\n                        getData();\n                    })\n                    .catch((err) => {\n                        console.log(err)\n                    })\n            } else {\n                Axios.post(\"http://localhost:3001/posts\", {\n                    title: title,\n                    body: body\n                })\n                    .then((res) => {\n                        getData();\n                        setTitle('');\n                        setBody('');\n                    })\n                    .catch((err) => {\n                        console.log(err)\n                    })\n            }\n\n        }\n    }\n\n    const formValidation = () => {\n        const titleErr = {}\n        const bodyErr = {}\n        let isValid = true\n        if (title.trim().length == 0) {\n            setE\n            titleErr.emptyTitle = \"empty title\"\n            isValid = false\n        }\n        if (body.trim().length == 0) {\n            bodyErr.emptyBody = \"empty description\"\n            isValid = false\n        }\n        setTitleErr(titleErr)\n        setBodyErr(bodyErr)\n        return isValid\n\n    }\n\n    //delete\n    const deleteHandler = (item) => {\n        console.log(item, \"item\")\n        Axios.delete(`http://localhost:3001/posts/${item}`)\n            .then((res) => {\n                getData();\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    };\n    //edit//update\n    const editHandler = (item) => {\n        setTitle(item.title);\n        setBody(item.body);\n        setEditId(item.id)\n        setIsEdit(true)\n    }\n\n    //error and loading state\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <>\n                <Header />\n                <div style={{ textAlign: 'center' }}>\n                    <form onSubmit={submitHandler}>\n                        <label for=\"title\">Enter Title:</label><br />\n                        <input type=\"text\" onChange={(e) => setTitle(e.target.value)} value={title} id=\"title\" name=\"title\" /><br />\n                        {Object.keys(titleErr).map((key) => {\n                            return <div style={{ color: \"red\" }}>{titleErr[key]}</div>\n                        })}\n                        <label for=\"body\">Enter Description:</label><br />\n                        <input type=\"text\" onChange={(e) => setBody(e.target.value)} value={body} id=\"body\" name=\"body\" /><br />\n                        {Object.keys(bodyErr).map((key) => {\n                            return <div style={{ color: \"red\" }}>{bodyErr[key]}</div>\n                        })}\n                        {\n                            isEdit ?\n                                <button type=\"submit\" >Update</button>\n                                :\n                                <button type=\"submit\" >Submit</button>\n                        }\n                    </form>\n                </div>\n                <ul>\n                    {items.map((item, index) => {\n                        return (\n                            <li key={item.id}>\n                                <ul>\n                                    <li>ID :- {index + 1}</li>\n                                    <li>TITLE :- {item.title}</li>\n                                    <li>DESCRIPTION :- {item.body}</li>\n                                    <button onClick={() => { deleteHandler(item.id) }} ><i class=\"material-icons\">delete</i></button>\n                                    <button onClick={() => { editHandler(item) }}><i class=\"material-icons\">EDIT</i></button>\n                                </ul>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </>\n        );\n    }\n}\nexport default Posts\n"]},"metadata":{},"sourceType":"module"}