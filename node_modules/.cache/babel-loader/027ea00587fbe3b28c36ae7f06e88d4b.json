{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport storage from 'local-storage-fallback';\nexport default function useTheme() {\n  _s();\n\n  let defaultTheme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    mode: 'light',\n    textZoom: 'normal'\n  };\n  const [theme, _setTheme] = useState(getInitialTheme);\n\n  function getInitialTheme() {\n    const savedTheme = storage.getItem('theme');\n    return savedTheme ? JSON.parse(savedTheme) : defaultTheme;\n  }\n\n  useEffect(() => {\n    storage.setItem('theme', JSON.stringify(theme));\n  }, [theme]);\n  return { ...theme,\n    setTheme: _ref => {\n      let {\n        setTheme,\n        ...theme\n      } = _ref;\n      return _setTheme(theme);\n    }\n  };\n}\n\n_s(useTheme, \"o/nmYv6u58QfJ3PUMpYE3UVyjF4=\");","map":{"version":3,"sources":["/home/addweb/jsPractice/taskby-kelvin/react-crud-routing/src/components/useTheme.js"],"names":["React","useState","useEffect","storage","useTheme","defaultTheme","mode","textZoom","theme","_setTheme","getInitialTheme","savedTheme","getItem","JSON","parse","setItem","stringify","setTheme"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAEA,eAAe,SAASC,QAAT,GAEb;AAAA;;AAAA,MADAC,YACA,uEADe;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,QAAQ,EAAE;AAA3B,GACf;AACA,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBR,QAAQ,CAACS,eAAD,CAAnC;;AAEA,WAASA,eAAT,GAA2B;AACzB,UAAMC,UAAU,GAAGR,OAAO,CAACS,OAAR,CAAgB,OAAhB,CAAnB;AACA,WAAOD,UAAU,GACbE,IAAI,CAACC,KAAL,CAAWH,UAAX,CADa,GAEbN,YAFJ;AAGD;;AAEDH,EAAAA,SAAS,CACP,MAAM;AACJC,IAAAA,OAAO,CAACY,OAAR,CAAgB,OAAhB,EAAyBF,IAAI,CAACG,SAAL,CAAeR,KAAf,CAAzB;AACD,GAHM,EAIP,CAACA,KAAD,CAJO,CAAT;AAOA,SAAO,EACL,GAAGA,KADE;AAELS,IAAAA,QAAQ,EAAE;AAAA,UAAC;AAAEA,QAAAA,QAAF;AAAY,WAAGT;AAAf,OAAD;AAAA,aAA4BC,SAAS,CAACD,KAAD,CAArC;AAAA;AAFL,GAAP;AAID;;GAvBuBJ,Q","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport storage from 'local-storage-fallback';\n\nexport default function useTheme(\n  defaultTheme = { mode: 'light', textZoom: 'normal' }\n) {\n  const [theme, _setTheme] = useState(getInitialTheme);\n\n  function getInitialTheme() {\n    const savedTheme = storage.getItem('theme');\n    return savedTheme\n      ? JSON.parse(savedTheme)\n      : defaultTheme;\n  }\n\n  useEffect(\n    () => {\n      storage.setItem('theme', JSON.stringify(theme));\n    },\n    [theme]\n  );\n\n  return {\n    ...theme,\n    setTheme: ({ setTheme, ...theme }) => _setTheme(theme)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}